# Generated by Django 5.2.6 on 2025-09-15 14:45

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('players', '0002_remove_tournament_players_delete_group_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('location', models.CharField(max_length=100)),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('format', models.PositiveIntegerField(choices=[(16, '16 игроков (плей-офф)'), (32, '32 игрока (плей-офф)'), (64, '64 игрока (группы + плей-офф)')], default=16)),
                ('description', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('REG', 'Регистрация'), ('GRP', 'Группы'), ('KO', 'Плей-офф'), ('DONE', 'Завершён')], default='REG', max_length=4)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tournaments', to=settings.AUTH_USER_MODEL)),
                ('players', models.ManyToManyField(blank=True, related_name='tournaments', to='players.player')),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=2)),
                ('players', models.ManyToManyField(blank=True, related_name='groups', to='players.player')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='tournaments.tournament')),
            ],
            options={
                'unique_together': {('tournament', 'code')},
            },
        ),
        migrations.CreateModel(
            name='GroupMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('p1_score', models.PositiveIntegerField(blank=True, null=True)),
                ('p2_score', models.PositiveIntegerField(blank=True, null=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='tournaments.group')),
                ('p1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_as_p1', to='players.player')),
                ('p2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_as_p2', to='players.player')),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='group_wins', to='players.player')),
            ],
            options={
                'unique_together': {('group', 'p1', 'p2')},
            },
        ),
        migrations.CreateModel(
            name='BracketMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_no', models.PositiveIntegerField()),
                ('slot', models.PositiveIntegerField()),
                ('p1_score', models.PositiveIntegerField(blank=True, null=True)),
                ('p2_score', models.PositiveIntegerField(blank=True, null=True)),
                ('next_as_p1', models.BooleanField(blank=True, null=True)),
                ('next_match', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prev_matches', to='tournaments.bracketmatch')),
                ('p1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bracket_as_p1', to='players.player')),
                ('p2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bracket_as_p2', to='players.player')),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bracket_wins', to='players.player')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bracket_matches', to='tournaments.tournament')),
            ],
            options={
                'ordering': ['round_no', 'slot'],
                'unique_together': {('tournament', 'round_no', 'slot')},
            },
        ),
    ]
